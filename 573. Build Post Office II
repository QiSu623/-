class GridType {
    public static final int wall = 2;
    public static final int house = 1;
    public static final int empty = 0;
}
public class Solution {
    /**
     * @param grid: a 2D grid
     * @return: An integer
     */
    public int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    public int shortestDistance(int[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return -1;
        }
        
        int n = grid.length;
        int m = grid[0].length;
        
        int ans = Integer.MAX_VALUE;
        int total_building_number = calc_building_number(grid);
        
        int[] tempResult = new int[2];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m ; j++) {
                if (grid[i][j] != GridType.empty) continue;
                
                tempResult = BFS(i, j, grid);
                
                int build_number = tempResult[0];
                int distance = tempResult[1];
                if (build_number == total_building_number) {
                    ans = Math.min(ans, distance);
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            return -1;
        }
        
        return ans;
    }
    
    private int calc_building_number(int[][] grid) {
        int count = 0;
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == GridType.house) {
                    count += 1;
                }
            }
        }
        
        return count;
    }
    
    private int[] BFS(int x, int y, int[][] grid) {
        int count = 0;
        int total_distance = 0;
        int[] result = new int[2];
        
        int[][] distance = new int[grid.length][grid[0].length];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{x, y});
        distance[x][y] = 0;
        
        while (!queue.isEmpty()) {
            int[] temp = queue.poll();
            
            for (int[] dir : directions) {
                int newx = x + temp[0];
                int newy = y + temp[1];
                
                if (!isValid(newx, newy, grid, distance)) continue;
                if (grid[newx][newy] == GridType.empty) {
                    queue.offer(new int[]{newx, newy});
                    distance[newx][newy] = distance[x][y] + 1;
                }
                if (grid[newx][newy] == GridType.house) {
                    count += 1;
                    distance[newx][newy] = distance[x][y] + 1;
                    total_distance += distance[newx][newy];
                }
            }
        }
        result[0] = count;
        result[1] = total_distance;
        
        return result;
    }
    
    private boolean isValid(int x, int y, int[][] grid, int[][] distance) {
        if (x < 0 || y < 0 || x >= grid.length || y >= grid[0].length) {
            return false;
        }
        
        if (grid[x][y] == GridType.wall) {
            return false;
        }
        
        if (distance[x][y] == 0) {
            return false;
        }
        
        return true;
    }
}
